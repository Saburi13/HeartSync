package com.example.hridayasuraksha;

import android.content.Intent;
import android.os.Bundle;
import android.text.Editable;
import android.text.InputType;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.inputmethod.EditorInfo;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.material.button.MaterialButton;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;

// Google Sign-In
import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.tasks.Task;

// Firebase Auth credential
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.GoogleAuthProvider;

public class RegisterActivity extends AppCompatActivity {

    private static final int RC_SIGN_IN = 9002;

    private EditText etFullName, etEmail, etPassword, etConfirmPassword;
    private ImageButton btnTogglePassword, btnToggleConfirm, btnGoogle;
    private MaterialButton btnRegister;
    private CheckBox cbTerms;
    private TextView tvGoToLogin;

    private FirebaseAuth mAuth;
    private GoogleSignInClient mGoogleSignInClient;

    private boolean isPasswordVisible = false;
    private boolean isConfirmVisible = false;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_register);

        mAuth = FirebaseAuth.getInstance();

        // Bind Views
        etFullName = findViewById(R.id.etFullName);
        etEmail = findViewById(R.id.etEmail);
        etPassword = findViewById(R.id.etPassword);
        etConfirmPassword = findViewById(R.id.etConfirmPassword);
        btnTogglePassword = findViewById(R.id.btnTogglePassword);
        btnToggleConfirm = findViewById(R.id.btnToggleConfirm);
        btnGoogle = findViewById(R.id.btnGoogle);
        btnRegister = findViewById(R.id.btnRegister);
        cbTerms = findViewById(R.id.cbTerms);
        tvGoToLogin = findViewById(R.id.tvGoToLogin);

        // Google Sign-In
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                // Make sure default_web_client_id exists in strings (generated by google-services plugin)
                .requestIdToken(getString(R.string.default_web_client_id))
                .requestEmail()
                .build();
        mGoogleSignInClient = GoogleSignIn.getClient(this, gso);

        // IME navigation: Next/Done behavior
        wireImeActions();

        // Text watchers to enable/disable button based on validity + terms
        TextWatcher watcher = new SimpleTextWatcher(this::updateRegisterButtonState);
        etFullName.addTextChangedListener(watcher);
        etEmail.addTextChangedListener(watcher);
        etPassword.addTextChangedListener(watcher);
        etConfirmPassword.addTextChangedListener(watcher);
        cbTerms.setOnCheckedChangeListener((buttonView, isChecked) -> updateRegisterButtonState());

        // Password visibility toggles
        btnTogglePassword.setOnClickListener(v -> toggleVisibility(etPassword, true));
        btnToggleConfirm.setOnClickListener(v -> toggleVisibility(etConfirmPassword, false));

        // Register with Firebase (email/password)
        btnRegister.setOnClickListener(v -> tryRegister());

        // Google Register/Login
        btnGoogle.setOnClickListener(v -> signInWithGoogle());

        // Redirect to Login
        tvGoToLogin.setOnClickListener(v -> {
            startActivity(new Intent(RegisterActivity.this, LoginActivity.class));
            finish();
        });

        // Initial state
        updateRegisterButtonState();
    }

    private void wireImeActions() {
        // Full Name: IME Next -> Email
        etFullName.setImeOptions(EditorInfo.IME_ACTION_NEXT);
        etFullName.setOnEditorActionListener((v, actionId, event) -> {
            if (actionId == EditorInfo.IME_ACTION_NEXT) {
                etEmail.requestFocus();
                return true;
            }
            return false;
        });

        // Email: IME Next -> Password
        etEmail.setImeOptions(EditorInfo.IME_ACTION_NEXT);
        etEmail.setOnEditorActionListener((v, actionId, event) -> {
            if (actionId == EditorInfo.IME_ACTION_NEXT) {
                etPassword.requestFocus();
                return true;
            }
            return false;
        });

        // Password: IME Next -> Confirm Password
        etPassword.setImeOptions(EditorInfo.IME_ACTION_NEXT);
        etPassword.setOnEditorActionListener((v, actionId, event) -> {
            if (actionId == EditorInfo.IME_ACTION_NEXT) {
                etConfirmPassword.requestFocus();
                return true;
            }
            return false;
        });

        // Confirm Password: IME Done -> Submit form
        etConfirmPassword.setImeOptions(EditorInfo.IME_ACTION_DONE);
        etConfirmPassword.setOnEditorActionListener((v, actionId, event) -> {
            if (actionId == EditorInfo.IME_ACTION_DONE) {
                tryRegister();
                return true;
            }
            return false;
        });
    }

    private void toggleVisibility(EditText editText, boolean isMainPasswordField) {
        boolean currentlyVisible = (editText.getInputType() & InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD) == InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD;

        if (currentlyVisible) {
            // Make it password
            editText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
        } else {
            // Make it visible text
            editText.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);
        }
        // Keep cursor at end
        editText.setSelection(editText.getText().length());

        if (isMainPasswordField) {
            isPasswordVisible = !currentlyVisible;
            btnTogglePassword.setImageResource(isPasswordVisible ? R.drawable.ic_eye_off_24 : R.drawable.ic_eye_24);
        } else {
            isConfirmVisible = !currentlyVisible;
            btnToggleConfirm.setImageResource(isConfirmVisible ? R.drawable.ic_eye_off_24 : R.drawable.ic_eye_24);
        }
    }

    private void tryRegister() {
        String fullName = text(etFullName);
        String email = text(etEmail);
        String password = text(etPassword);
        String confirmPassword = text(etConfirmPassword);

        if (!cbTerms.isChecked()) {
            Toast.makeText(this, "Please accept terms & privacy policy", Toast.LENGTH_SHORT).show();
            return;
        }
        if (!isAllInputValid(fullName, email, password, confirmPassword)) {
            // Specific toasts already shown by validation; stop here
            return;
        }

        btnRegister.setEnabled(false);

        mAuth.createUserWithEmailAndPassword(email, password)
                .addOnCompleteListener(task -> {
                    btnRegister.setEnabled(true);
                    if (task.isSuccessful()) {
                        FirebaseUser user = mAuth.getCurrentUser();
                        Toast.makeText(this, "Welcome " + fullName, Toast.LENGTH_SHORT).show();
                        // TODO: Optionally update user display name or store profile in Firestore

                        startActivity(new Intent(RegisterActivity.this, DashboardActivity.class)
                                .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK));
                        finish();
                    } else {
                        Toast.makeText(this, "Registration failed: " +
                                        (task.getException() != null ? task.getException().getMessage() : "Unknown error"),
                                Toast.LENGTH_SHORT).show();
                    }
                });
    }

    private boolean isAllInputValid(String fullName, String email, String password, String confirmPassword) {
        if (TextUtils.isEmpty(fullName) || TextUtils.isEmpty(email)
                || TextUtils.isEmpty(password) || TextUtils.isEmpty(confirmPassword)) {
            Toast.makeText(this, "Please fill all fields", Toast.LENGTH_SHORT).show();
            return false;
        }
        if (!android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
            etEmail.requestFocus();
            etEmail.setError("Invalid email");
            return false;
        }
        if (password.length() < 6) {
            etPassword.requestFocus();
            etPassword.setError("Min 6 characters");
            return false;
        }
        if (!password.equals(confirmPassword)) {
            etConfirmPassword.requestFocus();
            etConfirmPassword.setError("Passwords do not match");
            return false;
        }
        return true;
    }

    private void updateRegisterButtonState() {
        String fullName = text(etFullName);
        String email = text(etEmail);
        String password = text(etPassword);
        String confirmPassword = text(etConfirmPassword);
        boolean looksValid = !fullName.isEmpty()
                && !email.isEmpty()
                && android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()
                && password.length() >= 6
                && password.equals(confirmPassword);
        btnRegister.setEnabled(cbTerms.isChecked() && looksValid);
        // Optional: you can set alpha to give visual feedback
        btnRegister.setAlpha(btnRegister.isEnabled() ? 1f : 0.5f);
    }

    private String text(EditText e) {
        return e.getText() != null ? e.getText().toString().trim() : "";
    }

    // Google Sign-In Flow
    private void signInWithGoogle() {
        Intent signInIntent = mGoogleSignInClient.getSignInIntent();
        // Using the deprecated onActivityResult path here for simplicity since it matches your current code
        startActivityForResult(signInIntent, RC_SIGN_IN);
    }

    @Override
    @SuppressWarnings("deprecation")
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == RC_SIGN_IN) {
            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);
            try {
                GoogleSignInAccount account = task.getResult(ApiException.class);
                firebaseAuthWithGoogle(account.getIdToken());
            } catch (ApiException e) {
                Toast.makeText(this, "Google sign in failed", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void firebaseAuthWithGoogle(@Nullable String idToken) {
        if (idToken == null) {
            Toast.makeText(this, "Google token missing", Toast.LENGTH_SHORT).show();
            return;
        }
        AuthCredential credential = GoogleAuthProvider.getCredential(idToken, null);
        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(this, task -> {
                    if (task.isSuccessful()) {
                        FirebaseUser user = mAuth.getCurrentUser();
                        String name = user != null && user.getDisplayName() != null ? user.getDisplayName() : "User";
                        Toast.makeText(this, "Welcome " + name, Toast.LENGTH_SHORT).show();
                        startActivity(new Intent(RegisterActivity.this, DashboardActivity.class)
                                .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK));
                        finish();
                    } else {
                        Toast.makeText(this, "Google Auth failed", Toast.LENGTH_SHORT).show();
                    }
                });
    }

    // Simple TextWatcher to reduce boilerplate
    private static class SimpleTextWatcher implements TextWatcher {
        private final Runnable onChange;

        SimpleTextWatcher(Runnable onChange) {
            this.onChange = onChange;
        }

        @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { }
        @Override public void onTextChanged(CharSequence s, int start, int before, int count) { }
        @Override public void afterTextChanged(Editable s) { onChange.run(); }
    }
}